#! /usr/bin/env node
var UploadClient = require('../index').UploadClient,
    yargs = require('yargs'),
    chalk = require('chalk'),
    fs = require('fs'),
    path = require('path')
;

yargs
  .usage('Usage: $0 --token [UPLOAD TOKEN] --name database.sql some_file.sql')
  .options({
    'host': {
      alias: 'H',
      describe: 'The host to upload to (defaults to `https://upload.probo.ci`)',
      default: 'https://upload.probo.ci'
    },
    'name': {
      alias: 'n',
      describe: 'The name of the file asset to store (defaults to the file name if a file is specified by name).'
    },
    'token': {
      alias: 't',
      describe: 'An existing upload token allowing this request.',
      demandOption: true
    }
  })
  .help();
var argv = yargs.argv;

if (argv.help) {
  yargs.showHelp();
  process.exit(0);
}

function throwTokenReadError() {
  console.error(chalk.red('Error:') + ' Could not read token.');
  yargs.showHelp();
  process.exit(1);
}

if (
  typeof argv.token !== 'string'
) {
  throwTokenReadError();
} else if (
  argv.token.indexOf('=') > -1 ||
  !argv.token.match(/^[a-zA-Z0-9]{8}\-([a-zA-Z0-9]{4}\-){3}[a-zA-Z0-9]{12}$/)
) {
  throwTokenReadError();
}

if (argv._[0]) {
  var filePath = argv._[0];
  try {
    var stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      console.error(chalk.red('Error:') + ' Directories are not yet supported.');
      process.exit(1);
    }
    // Use the actual filename if a file is given and no name is explicitly set.
    if (!argv.name) {
      argv.name = path.basename(filePath);
    }
  }
  catch (e) {
    if (!stat) {
      console.error(chalk.red('Error:') + ' File could not be found. Does it exist? Do we have permission to read it?', filePath);
      process.exit(1);
    }
  }
}
else {
  if (!argv.name) {
    console.error(chalk.red('Error:') + ' When using the streaming interface you must name your build asset.');
    process.exit(1);
  }
}

client = new UploadClient(argv);

var handleUpload = function(error, response) {
  if (error) {
    console.error(error.message);
    process.exit(1);
  }
  console.log('Upload successful.');
};

// If a file was provided as an argument stream it.
if (filePath) {
  client.uploadFile(argv._[0], handleUpload);
}
// Otherwise assume we are reading from stdin.
else {
  client.uploadStream(process.stdin, handleUpload);
}

